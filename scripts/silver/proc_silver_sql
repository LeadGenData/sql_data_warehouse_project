/*

====================================================================
Stored Procedure --> silver.load_silver (Bronze to Silver)
====================================================================
Purpose:
This stored procedure, silver.load_silver, processes data from the Bronze Layer and loads it into the Silver Layer. 
It ensures data transformation, cleaning, and formatting before storing it for analytical use.

What This Procedure Does:

- Truncates Silver Layer tables to remove old data before loading fresh records.
- Extracts data from Bronze tables.
- Transforms data (removes duplicates, trims spaces, formats categories).
- Applies business rules (fixes missing values, updates gender, marital status, and product categories).
- Inserts the cleaned data into Silver tables.
- Logs execution time to monitor performance.

Warnings:
⚠️ Data Truncation:

- Truncating deletes all records in Silver tables before inserting new ones.
- Once truncated, data cannot be recovered unless backups exist.

⚠️ Bulk Inserts Impact:

- Large inserts can lock tables, causing delays for other queries running at the same time.
- Consider using batch processing or indexing for better performance.

⚠️ Data Transformation Risks:

- Some values are reformatted (e.g., gender changes from M → Male, F → Female).
- Make sure the business rules align with expected reporting needs.

⚠️ Error Handling:

- Errors are printed, but not stored in a log table.
- For better debugging, an error tracking table could be added.

⚠️ Naming Consistency:

- Double-check that table and column names match the database structure to avoid execution failures.
- Use consistent date formats while inserting records.

Parameters:
  None.
  This Stored Procedure does not accpet any parameters and return any values.

Example Use:
EXEC silver.load_silver
*/


CREATE OR ALTER   PROCEDURE silver.load_silver AS
BEGIN
	DECLARE @start_time DATETIME, @end_time DATETIME, @batch_start_time DATETIME, @batch_end_time DATETIME;
	BEGIN TRY
		SET @batch_start_time = GETDATE();
		PRINT '==================================================';
		PRINT 'Loading Silver Layer';
		PRINT '==================================================';

		PRINT '--------------------------------------------------';
		PRINT 'Loading CRM Tables';
		PRINT '--------------------------------------------------';
	
	--Loading silver.crm_cust_info
	SET @start_time = GETDATE();
	PRINT '>> Truncating Table : silver.crm_cust_info';
	TRUNCATE TABLE silver.crm_cust_info;
	PRINT '>> Inserting Data Into : silver.crm_cust_info';
	INSERT INTO silver.crm_cust_info (
		cst_id,
		cst_key,
		cst_firstname,
		cst_lastname,
		cst_material_status,
		cst_gndr,
		cst_create_date
	)
	SELECT
		cst_id,
		cst_key,
		TRIM(cst_firstname) AS cst_firstname,
		TRIM(cst_lastname) AS cst_lastname,
		CASE 
			WHEN UPPER(TRIM(cst_material_status)) = 'S' THEN 'Single'
			WHEN UPPER(TRIM(cst_material_status)) = 'M' THEN 'Married'
		ELSE 'n/a'
		END cst_material_status,
		CASE 
			WHEN UPPER(TRIM(cst_gndr)) = 'F' THEN 'Female'
			WHEN UPPER(TRIM(cst_gndr)) = 'M' THEN 'Male'
		ELSE 'n/a'
		END cst_gndr,
		cst_create_date
	FROM (
		SELECT
			*,
			ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) as flag_last
		FROM bronze.crm_cust_info
		WHERE cst_id IS NOT NULL
	)t WHERE flag_last = 1;
	SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
	PRINT '---------------------------';

	--Loading silver.crm_prd_info
	SET @start_time = GETDATE();
	PRINT '>> Truncating Table : silver.crm_prd_info';
	TRUNCATE TABLE silver.crm_prd_info;
	PRINT '>> Inserting Data Into : silver.crm_prd_info';
	INSERT INTO silver.crm_prd_info (
		prd_id,
		cat_id,
		prd_key,
		prd_nm,
		prd_cost,
		prd_line,
		prd_start_dt,
		prd_end_dt
	)	
	SELECT 
		prd_id,
		REPLACE(SUBSTRING(prd_key, 1,5), '-','_') AS cat_id,
		SUBSTRING(prd_key, 7,LEN(prd_key)) AS prd_key,
		prd_nm,
		ISNULL(prd_cost, 0) AS prd_cost,
		CASE UPPER(TRIM(prd_line)) 
			WHEN 'M' THEN 'Mountain'
			WHEN 'R' THEN 'Road'
			WHEN 'S' THEN 'Other Sales'
			WHEN 'T' THEN 'Touring'
			ELSE 'n/a'
		END prd_line,
		CAST(prd_start_dt AS DATE) AS prd_start_dt,
		CAST(LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS DATE) AS prd_end_dt
	FROM bronze.crm_prd_info;
	SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
	PRINT '---------------------------';

	--Loading silver.crm_sales_details
	SET @start_time = GETDATE();
	PRINT '>> Truncating Table : silver.crm_sales_details';
	TRUNCATE TABLE silver.crm_sales_details;
	PRINT '>> Inserting Data Into : silver.crm_sales_details';
	INSERT INTO silver.crm_sales_details (
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		sls_order_dt,
		sls_ship_dt,
		sls_due_dt,
		sls_sales,
		sls_quantity,
		sls_price
	)
	SELECT 
		sls_ord_num,
		sls_prd_key,
		sls_cust_id,
		CASE WHEN  sls_order_dt = 0 OR LEN(sls_order_dt) != 8 THEN NULL
			ELSE CAST(CAST(sls_order_dt AS VARCHAR) AS DATE)
		END AS sls_order_dt,
		CASE WHEN  sls_ship_dt = 0 OR LEN(sls_ship_dt) != 8 THEN NULL
			ELSE CAST(CAST(sls_ship_dt AS VARCHAR) AS DATE)
		END AS sls_ship_dt,
			CASE WHEN  sls_due_dt = 0 OR LEN(sls_due_dt) != 8 THEN NULL
			ELSE CAST(CAST(sls_due_dt AS VARCHAR) AS DATE)
		END AS sls_due_dt,
		CASE WHEN sls_sales IS NULL OR sls_sales  <=0 OR sls_sales != sls_quantity * ABS(sls_price)
				THEN sls_quantity * ABS(sls_price)
		ELSE sls_sales
	END AS sls_sales,
		sls_quantity,
	CASE WHEN sls_price IS NULL OR sls_price <= 0
		THEN sls_sales/ NULLIF(sls_quantity,0)
		ELSE sls_price
	END  sls_price
	FROM bronze.crm_sales_details;
	SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
	PRINT '---------------------------';

	--Loading silver.erp_cust_az12
	SET @start_time = GETDATE();
	PRINT '>> Truncating Table : silver.erp_cust_az12';
	TRUNCATE TABLE silver.erp_cust_az12;

	PRINT '>> Inserting Data Into : silver.erp_cust_az12';
	INSERT INTO silver.erp_cust_az12 (
		cid,
		bdate,
		gen
	) 
	 SELECT	
		CASE WHEN cid LIKE 'NAS%'THEN SUBSTRING(cid,4, LEN(cid))
			ELSE cid
		END cid,
		CASE WHEN bdate > GETDATE() THEN NULL
			ELSE bdate
		END bdate,
		CASE WHEN UPPER(TRIM(gen)) IN ('F', 'FEMALE') THEN 'Female'
			WHEN UPPER(TRIM(gen)) IN ('M', 'MALE') THEN 'Male'
		ELSE 'n/a'
		END gen
	FROM bronze.erp_cust_az12;
	SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
	PRINT '---------------------------';

	--Loading silver.erp_loc_a101
	SET @start_time = GETDATE();
	PRINT '>> Truncating Table : silver.erp_loc_a101';
	TRUNCATE TABLE silver.erp_loc_a101;

	PRINT '>> Inserting Data Into : silver.erp_loc_a101';
	INSERT INTO silver.erp_loc_a101
	(cid, cntry)

	SELECT 
		REPLACE(cid,'-',' ') AS cide,
		CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
			 WHEN TRIM(cntry) IN ('US', 'USA') THEN 'United States'
			 WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'
			ELSE cntry
		END AS cntry
	  FROM bronze.erp_loc_a101;
	  	SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
	PRINT '---------------------------';

	--Loading silver.erp_px_cat_g1v2
	SET @start_time = GETDATE();
	PRINT '>> Truncating Table : silver.erp_px_cat_g1v2';
	TRUNCATE TABLE silver.erp_px_cat_g1v2;

	PRINT '>> Inserting Data Into : silver.erp_px_cat_g1v2';
	INSERT INTO silver.erp_px_cat_g1v2
	(
		id,
		cat,
		subcat,
		maintenance
	)
	SELECT 
		id,
		cat,
		subcat,
		maintenance
	FROM bronze.erp_px_cat_g1v2;
		SET @end_time = GETDATE();
		PRINT '>> Load Duration: ' + CAST(DATEDIFF(second, @start_time, @end_time) AS NVARCHAR) + ' seconds';
	PRINT '---------------------------';

			SET @batch_end_time = GETDATE();
		PRINT '=========================================================='
		PRINT 'Loading Silver Layer is Completed';
		PRINT '  - Total Load Duration : ' + CAST(DATEDIFF(second,@batch_start_time, @batch_end_time) AS NVARCHAR) + ' seconds';	
		PRINT '=========================================================='

		END TRY
		BEGIN CATCH
			PRINT '=========================================================='
			PRINT 'ERROR OCCURED DURING LOADING SILVER LAYER';
			PRINT 'Error Message' + ERROR_MESSAGE();
			PRINT 'Error Message' + CAST(ERROR_NUMBER() AS NVARCHAR);
			PRINT 'Error Message' + CAST(ERROR_STATE() AS NVARCHAR);
			PRINT '=========================================================='
		END CATCH
END;
